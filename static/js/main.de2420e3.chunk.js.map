{"version":3,"sources":["components/ButtonContainer.jsx","components/Grid.js","App.jsx","index.js"],"names":["ButtonContainer","props","onPlay","onFast","onSlow","onSeed","onClear","isStoped","className","onClick","Grid","gridfull","setBox","columns","map","row","i","_","j","id","objectCopy","obj","JSON","parse","stringify","App","emptyGrid","Array","fill","useState","speed","setSpeed","generation","setGeneration","gridFull","setGridfull","intervalId","setIntervalId","useEffect","prev","grid","gridCopy","column","length","aliveNeighbours","gridMove","clearInterval","newIntervalId","setInterval","clearHandler","Math","floor","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.de2420e3.chunk.js","sourcesContent":["const ButtonContainer = (props) => {\n    const {\n        onPlay,\n        onFast,\n        onSlow,\n        onSeed,\n        onClear,\n        isStoped } = props\n    return <div className=\"button-container\">\n            <button onClick={onPlay}>{isStoped ? \"play\" : \"stop\"}</button>\n            <button onClick={onFast}>fast</button>\n            <button onClick={onSlow}>slow</button>\n            <button onClick={onSeed}>new seed</button>\n            <button onClick={onClear}>clear</button>\n            <button onClick={onClear}>clear</button>\n    </div>\n}\nexport default ButtonContainer","\nconst Grid = ({ gridfull, setBox }) => {\n    const columns = gridfull.map((row, i) => {\n        return row.map((_, j) => {\n            const id = `${i}_${j}`\n            const className = gridfull[i][j] ? \"cell\" : \"cell cell-dead\"\n            const clickHandle = () => { setBox(i, j) }\n            return <div className={className}\n                key={id}\n                onClick={clickHandle}>\n            </div>\n\n        })\n    })\n\n    return <div className=\"grid\">{\n        columns.map(row => <div className=\"grid-row\">{row}</div>)\n    } </div>\n}\nexport default Grid","import { useEffect, useState } from \"react\"\nimport ButtonGroup from \"./components/ButtonContainer\"\nimport Grid from \"./components/Grid\"\n\nconst App = () => {\n\n  const rows = 30\n  const columns = 70\n  const emptyGrid = Array(columns).fill().map(() => Array(rows).fill(false))\n\n  const [speed, setSpeed] = useState(1000)\n  const [generation, setGeneration] = useState(0)\n  const [gridFull, setGridfull] = useState(emptyGrid)\n  const [intervalId, setIntervalId] = useState(0)\n\n  const setCell = (i, j) => {\n    const gridCopy = objectCopy(gridFull)\n    gridCopy[i][j] = !gridFull[i][j]\n    setGridfull(gridCopy)\n  }\n\n  const gridMove = (grid) => {\n    const gridCopy = objectCopy(grid)\n\n    for (let column = 0; column < grid.length; column++) {\n      for (let row = 0; row < grid[0].length; row++) {\n        let aliveNeighbours = 0\n        for (let i = -1; i <= 1; i++) {\n          for (let j = -1; j <= 1; j++) {\n            aliveNeighbours += gridFull[column + i]?.[row + j] ? 1 : 0\n          }\n        }\n        // The cell must be subtracted from its neighbors\n        aliveNeighbours -= gridFull[column][row]\n        if (grid[column][row]) {\n          gridCopy[column][row] = aliveNeighbours >= 2 && aliveNeighbours <= 3\n\n        }\n        else {\n          gridCopy[column][row] = aliveNeighbours === 3\n        }\n      }\n    }\n    return gridCopy\n  }\n\n  const play = () => {\n    setGridfull(prev => gridMove(prev))\n  }\n\n  useEffect(play, [generation])\n  const onPlay = () => {\n    if (intervalId) {\n      clearInterval(intervalId)\n      setIntervalId(0)\n      return\n    }\n    const newIntervalId = setInterval(() => setGeneration(prev => prev + 1), speed)\n    setIntervalId(newIntervalId)\n  }\n\n  useEffect(() => {\n    if (intervalId) {\n      clearInterval(intervalId)\n      const newIntervalId = setInterval(() => setGeneration(prev => prev + 1), speed)\n      setIntervalId(newIntervalId)\n    }\n  }, [speed])\n\n  const fastHandler = () => {\n    setSpeed(100)\n  }\n\n  const slowHandler = () => {\n    setSpeed(1000)\n  }\n  const clearHandler = () => {\n    if (intervalId) {\n      clearInterval(intervalId)\n      setIntervalId(0)\n    }\n    setGeneration(0)\n    setGridfull(emptyGrid)\n  }\n\n  const seedHandler = () => {\n    clearHandler()\n    const gridCopy = objectCopy(emptyGrid);\n    for (let i = 0; i < columns; i++) {\n      for (let j = 0; j < rows; j++) {\n        if (Math.floor(Math.random() * 4) === 1) {\n          gridCopy[i][j] = true\n        }\n      }\n    }\n    setGridfull(gridCopy)\n  }\n\n  return <div >\n    <div className=\"main-layout\">\n      <header className=\"header\">\n        <h1 className=\"header__title\">The game of life</h1>\n        <ButtonGroup\n          onPlay={onPlay}\n          isStoped={!intervalId}\n          onSeed={seedHandler}\n          onFast={fastHandler}\n          onSlow={slowHandler}\n          onClear={clearHandler}\n           />\n      </header>\n\n      <Grid gridfull={gridFull}\n        setBox={setCell} />\n      <div className=\"generation\">Generation: {generation}</div>\n    </div>\n\n  </div>\n}\n\nconst objectCopy = (obj) => {\n  return JSON.parse(JSON.stringify(obj))\n}\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nReactDOM.render( <App/> , document.getElementById(\"root\"))"],"sourceRoot":""}